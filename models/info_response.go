// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InfoResponse info response
//
// swagger:model InfoResponse
type InfoResponse struct {

	// coin history
	CoinHistory *InfoResponseCoinHistory `json:"coinHistory,omitempty"`

	// Количество доступных монет.
	Coins int64 `json:"coins,omitempty"`

	// inventory
	Inventory []*InfoResponseInventoryItems0 `json:"inventory"`
}

// Validate validates this info response
func (m *InfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoinHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfoResponse) validateCoinHistory(formats strfmt.Registry) error {
	if swag.IsZero(m.CoinHistory) { // not required
		return nil
	}

	if m.CoinHistory != nil {
		if err := m.CoinHistory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coinHistory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coinHistory")
			}
			return err
		}
	}

	return nil
}

func (m *InfoResponse) validateInventory(formats strfmt.Registry) error {
	if swag.IsZero(m.Inventory) { // not required
		return nil
	}

	for i := 0; i < len(m.Inventory); i++ {
		if swag.IsZero(m.Inventory[i]) { // not required
			continue
		}

		if m.Inventory[i] != nil {
			if err := m.Inventory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inventory" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inventory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this info response based on the context it is used
func (m *InfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCoinHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInventory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfoResponse) contextValidateCoinHistory(ctx context.Context, formats strfmt.Registry) error {

	if m.CoinHistory != nil {

		if swag.IsZero(m.CoinHistory) { // not required
			return nil
		}

		if err := m.CoinHistory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coinHistory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coinHistory")
			}
			return err
		}
	}

	return nil
}

func (m *InfoResponse) contextValidateInventory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Inventory); i++ {

		if m.Inventory[i] != nil {

			if swag.IsZero(m.Inventory[i]) { // not required
				return nil
			}

			if err := m.Inventory[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inventory" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inventory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfoResponse) UnmarshalBinary(b []byte) error {
	var res InfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InfoResponseCoinHistory info response coin history
//
// swagger:model InfoResponseCoinHistory
type InfoResponseCoinHistory struct {

	// received
	Received []*InfoResponseCoinHistoryReceivedItems0 `json:"received"`

	// sent
	Sent []*InfoResponseCoinHistorySentItems0 `json:"sent"`
}

// Validate validates this info response coin history
func (m *InfoResponseCoinHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReceived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfoResponseCoinHistory) validateReceived(formats strfmt.Registry) error {
	if swag.IsZero(m.Received) { // not required
		return nil
	}

	for i := 0; i < len(m.Received); i++ {
		if swag.IsZero(m.Received[i]) { // not required
			continue
		}

		if m.Received[i] != nil {
			if err := m.Received[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coinHistory" + "." + "received" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("coinHistory" + "." + "received" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfoResponseCoinHistory) validateSent(formats strfmt.Registry) error {
	if swag.IsZero(m.Sent) { // not required
		return nil
	}

	for i := 0; i < len(m.Sent); i++ {
		if swag.IsZero(m.Sent[i]) { // not required
			continue
		}

		if m.Sent[i] != nil {
			if err := m.Sent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coinHistory" + "." + "sent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("coinHistory" + "." + "sent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this info response coin history based on the context it is used
func (m *InfoResponseCoinHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReceived(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfoResponseCoinHistory) contextValidateReceived(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Received); i++ {

		if m.Received[i] != nil {

			if swag.IsZero(m.Received[i]) { // not required
				return nil
			}

			if err := m.Received[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coinHistory" + "." + "received" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("coinHistory" + "." + "received" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfoResponseCoinHistory) contextValidateSent(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sent); i++ {

		if m.Sent[i] != nil {

			if swag.IsZero(m.Sent[i]) { // not required
				return nil
			}

			if err := m.Sent[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coinHistory" + "." + "sent" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("coinHistory" + "." + "sent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfoResponseCoinHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfoResponseCoinHistory) UnmarshalBinary(b []byte) error {
	var res InfoResponseCoinHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InfoResponseCoinHistoryReceivedItems0 info response coin history received items0
//
// swagger:model InfoResponseCoinHistoryReceivedItems0
type InfoResponseCoinHistoryReceivedItems0 struct {

	// Количество полученных монет.
	Amount int64 `json:"amount,omitempty"`

	// Имя пользователя, который отправил монеты.
	FromUser string `json:"fromUser,omitempty"`
}

// Validate validates this info response coin history received items0
func (m *InfoResponseCoinHistoryReceivedItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this info response coin history received items0 based on context it is used
func (m *InfoResponseCoinHistoryReceivedItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InfoResponseCoinHistoryReceivedItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfoResponseCoinHistoryReceivedItems0) UnmarshalBinary(b []byte) error {
	var res InfoResponseCoinHistoryReceivedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InfoResponseCoinHistorySentItems0 info response coin history sent items0
//
// swagger:model InfoResponseCoinHistorySentItems0
type InfoResponseCoinHistorySentItems0 struct {

	// Количество отправленных монет.
	Amount int64 `json:"amount,omitempty"`

	// Имя пользователя, которому отправлены монеты.
	ToUser string `json:"toUser,omitempty"`
}

// Validate validates this info response coin history sent items0
func (m *InfoResponseCoinHistorySentItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this info response coin history sent items0 based on context it is used
func (m *InfoResponseCoinHistorySentItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InfoResponseCoinHistorySentItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfoResponseCoinHistorySentItems0) UnmarshalBinary(b []byte) error {
	var res InfoResponseCoinHistorySentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InfoResponseInventoryItems0 info response inventory items0
//
// swagger:model InfoResponseInventoryItems0
type InfoResponseInventoryItems0 struct {

	// Количество предметов.
	Quantity int64 `json:"quantity,omitempty"`

	// Тип предмета.
	Type string `json:"type,omitempty"`
}

// Validate validates this info response inventory items0
func (m *InfoResponseInventoryItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this info response inventory items0 based on context it is used
func (m *InfoResponseInventoryItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InfoResponseInventoryItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfoResponseInventoryItems0) UnmarshalBinary(b []byte) error {
	var res InfoResponseInventoryItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
