// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAPIAuthHandlerFunc turns a function with the right signature into a post API auth handler
type PostAPIAuthHandlerFunc func(PostAPIAuthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAPIAuthHandlerFunc) Handle(params PostAPIAuthParams) middleware.Responder {
	return fn(params)
}

// PostAPIAuthHandler interface for that can handle valid post API auth params
type PostAPIAuthHandler interface {
	Handle(PostAPIAuthParams) middleware.Responder
}

// NewPostAPIAuth creates a new http.Handler for the post API auth operation
func NewPostAPIAuth(ctx *middleware.Context, handler PostAPIAuthHandler) *PostAPIAuth {
	return &PostAPIAuth{Context: ctx, Handler: handler}
}

/*
	PostAPIAuth swagger:route POST /api/auth postApiAuth

Аутентификация и получение JWT-токена.
*/
type PostAPIAuth struct {
	Context *middleware.Context
	Handler PostAPIAuthHandler
}

func (o *PostAPIAuth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAPIAuthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
